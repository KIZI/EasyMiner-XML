<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    targetNamespace="http://keg.vse.cz/ns/fdml0_2" xmlns="http://keg.vse.cz/ns/fdml0_2"
    elementFormDefault="unqualified" attributeFormDefault="unqualified"
    xmlns:fdml="http://keg.vse.cz/ns/fdml0_2" xmlns:sch="http://www.ascc.net/xml/schematron">
    <xs:annotation>
        <xs:appinfo>
            <sch:title>Schematron validation</sch:title>
            <sch:ns prefix="fdml" uri="http://keg.vse.cz/ns/fdml0_2"/>
        </xs:appinfo>
        <xs:documentation>ARDesigner Input</xs:documentation>
    </xs:annotation>
    <xs:annotation>
        <xs:documentation> Change log Author: Tomáš Kliegr tomas.kliegr@vse.cz Date: 9/2011 Added
            Type child on FieldMappingType element FieldRef cannot contain Name element Added field
            identification on Field Changed AuxilliaryIdentifier/Name to AuxilliaryIdentifier/@name
            Removed AuxilliaryIdentifier/Value - Value now directly content of AuxilliaryIdentifier
        </xs:documentation>
    </xs:annotation>
    <xs:element name="FDML" type="FDMLType">
        <xs:key name="DictUq">
            <xs:selector xpath="Dictionary"/>
            <xs:field xpath="@id"/>
        </xs:key>
        <xs:keyref refer="DictUq" name="DictRef">
            <xs:selector xpath="DictionaryMapping/FieldMapping/AppliesTo/FieldRef"/>
            <xs:field xpath="@dictID"/>
        </xs:keyref>
    </xs:element>
    <xs:complexType name="AbstractDataDescription" abstract="true">
        <!--
            This definition is reused also in other schemas (BKEF),
            where the DataDescription element is present without namespace. The schematron rules
            must therefore avoid explicitly using the DataDescription element as it can be once
            qualified and once unqualified.
        -->
        <xs:annotation>
            <xs:appinfo>
                <sch:pattern name="checkCatRef">
                    <!-- CatRef must contain value, id or both -->
                    <sch:rule
                        context="DictionaryMapping/FieldMapping/ValueMappings/ValueMapping/Field/CatRef">
                        <sch:assert test="text()|@id"> CatRef must contain value or @id or both
                        </sch:assert>
                    </sch:rule>
                </sch:pattern>
                <sch:pattern name="checkvalueMappingIntegrityFieldName">
                    <!-- category name -->
                    <sch:rule
                        context="DictionaryMapping/FieldMapping/AppliesTo/FieldRef/Name[text()]">
                        <sch:assert
                            test="text()=//Dictionary[@id=current()/../@dictID]/Field[@id=current()/../@id]/Name/text()"
                            diagnostics="namediag"> Field name in FieldRef does not match any Field
                            in Dictionary </sch:assert>
                    </sch:rule>
                </sch:pattern>
                <sch:pattern name="checkvalueMappingIntegrityByCatValue">
                    <!-- reference by category value -->
                    <sch:rule
                        context="DictionaryMapping/FieldMapping/ValueMappings/ValueMapping/Field/CatRef[text()]">
                        <sch:assert
                            test="text()=../../../../../../Dictionary[@id=current()/../@dictID]/Field[@id=current()/../@id]/Category/text()"
                            > The text in CatRef does not match any Category </sch:assert>
                    </sch:rule>
                </sch:pattern>
                <sch:pattern name="checkvalueMappingIntegrityByCatID">
                    <!-- reference by category id -->
                    <sch:rule
                        context="DictionaryMapping/FieldMapping/ValueMappings/ValueMapping/Field/CatRef[@id]">
                        <sch:assert
                            test="@id=../../../../../../Dictionary[@id=current()/../@dictID]/Field[@id=current()/../@id]/Category/@id"
                            > CatRef id does not match any category </sch:assert>
                    </sch:rule> </sch:pattern>
                <sch:diagnostics>
                    <sch:diagnostic id="namediag"> Error! default diag does not match count =
                            <sch:value-of select="text()"/>
                        <sch:value-of
                            select="//Dictionary[@id=current()/../@dictID]/Field[@id=current()/../@id]/Name/text()"
                        />
                    </sch:diagnostic>
                    <sch:diagnostic id="def"> Error! default diag does not match count =
                            <sch:value-of select="count(Dictionary[@default='true'])"/>
                    </sch:diagnostic>
                </sch:diagnostics>
            </xs:appinfo>
        </xs:annotation>
        <!--xs:sequence>
            <xs:element name="Dictionary" type="Dictionary_dd" minOccurs="1" maxOccurs="unbounded"/>
            <xs:element name="DictionaryMapping" type="DictionaryMapping" minOccurs="0"/>
            </xs:sequence-->
    </xs:complexType>
    <xs:complexType name="FDMLType">
        <xs:complexContent>
            <xs:extension base="AbstractDataDescription">
                <xs:sequence>
                    <xs:element name="Header" type="Header"> </xs:element>
                    <xs:element name="Dictionary" type="Dictionary" minOccurs="2" maxOccurs="2">
                        <xs:key name="FieldUq">
                            <xs:selector xpath="Field"/>
                            <xs:field xpath="@id"/>
                        </xs:key>
                    </xs:element>
                    <xs:element name="DictionaryStatistics" minOccurs="0">
                        <!-- TODO využít typy FieldStatisitcs, CatStatistics a  IntStatistics -->
                    </xs:element>
                    <xs:element name="DictionaryMapping" type="DictionaryMapping" minOccurs="0"/>
                </xs:sequence>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="Header">
        <xs:sequence>
            <xs:element name="Extension" type="Extension" minOccurs="0" maxOccurs="unbounded"/>
            <xs:element name="Application" minOccurs="0" type="Application"/>
            <xs:element name="Annotation" minOccurs="0" maxOccurs="unbounded" type="Annotation"/>
            <xs:element name="Timestamp" minOccurs="0" type="Timestamp"/>
            <xs:element name="Author"/>
        </xs:sequence>
        <xs:attribute name="copyright" type="xs:string" use="required"/>
        <xs:attribute name="description" type="xs:string"/>
    </xs:complexType>


    <xs:complexType name="Application">
        <xs:sequence>
            <xs:element name="Extension" type="Extension" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
        <xs:attribute name="name" type="xs:string" use="required"/>
        <xs:attribute name="version" type="xs:string"/>
    </xs:complexType>


    <xs:complexType name="Extension">
        <xs:complexContent mixed="true">
            <xs:restriction base="xs:anyType">
                <xs:sequence>
                    <xs:any processContents="skip" minOccurs="0" maxOccurs="unbounded"/>
                </xs:sequence>
                <xs:attribute name="extender" type="xs:string" use="optional"/>
                <xs:attribute name="name" type="xs:string" use="optional"/>
                <xs:attribute name="value" type="xs:string" use="optional"/>
            </xs:restriction>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType mixed="true" name="Annotation">
        <xs:sequence>
            <xs:element name="Extension" type="Extension" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType mixed="true" name="Timestamp">
        <xs:sequence>
            <xs:element name="Extension" type="Extension" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="DictionaryMapping">
        <xs:sequence>
            <xs:element name="FieldMapping" type="FieldMapping" maxOccurs="unbounded"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="FieldMapping">
        <xs:sequence>
            <xs:element name="AppliesTo" type="AppliesTo"/>
            <xs:element name="MappingInfo" type="FieldMappingMappingInfo" minOccurs="0"/>
            <xs:choice>
                <xs:element name="ValueMappings" type="ValueMappings"/>                
                <xs:element name="IntervalMapping"/>
            </xs:choice>
        </xs:sequence>
    </xs:complexType>
        <xs:complexType name="ValueMappings">
            <xs:sequence>
                <xs:element name="ValueMapping" type="ValueMapping"
                    maxOccurs="unbounded"/>
            </xs:sequence>
        </xs:complexType>
    
    <xs:complexType name="AppliesTo">
        <xs:sequence>
            <xs:element name="FieldRef" type="FieldRef" minOccurs="2" maxOccurs="2"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="FieldMappingMappingInfo">
        <xs:sequence>
            <xs:element name="FieldMappingType" type="FieldMappingType"/>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="FieldMappingType">
        <xs:choice>
            <xs:element name="Type">
                <xs:simpleType>
                    <xs:restriction base="xs:string">
                        <xs:enumeration value="user"/>
                        <xs:enumeration value="autosuggestion"/>
                    </xs:restriction>
                </xs:simpleType>
            </xs:element>
            <xs:element name="Autosuggestion">
                <xs:complexType>
                    <xs:sequence>
                        <xs:element name="Names" type="xs:double"/>
                        <xs:element name="Values" type="xs:double"/>
                        <xs:element name="Experience" type="xs:double"/>
                    </xs:sequence>
                    <xs:attribute name="confirmed" type="xs:boolean"/>
                </xs:complexType>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="ValueMapping">
        <xs:sequence>
            <xs:element name="Field" minOccurs="2" maxOccurs="2" type="FieldMappingConstituent"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="FieldMappingConstituent">
        <xs:sequence>
            <!--xs:element name="Name" type="xs:string" minOccurs="0"/-->
            <xs:choice>
                <xs:element name="CatRef" type="CatRef" minOccurs="1" maxOccurs="unbounded"/>
                <xs:element name="Interval" type="IntervalType" minOccurs="1" maxOccurs="unbounded"
                />
            </xs:choice>
        </xs:sequence>
        <xs:attributeGroup ref="FieldIdentification"/>
    </xs:complexType>

    <xs:attributeGroup name="FieldIdentification">
        <xs:attribute name="id" type="xs:string" use="required"/>
        <xs:attribute name="dictID" type="xs:string" use="required"/>
    </xs:attributeGroup>

    <xs:complexType name="CatRef">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="id" type="xs:string"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="FieldRef">
        <!--xs:sequence>
            <xs:element name="Name"  />
        </xs:sequence-->
        <xs:attributeGroup ref="FieldIdentification"/>
    </xs:complexType>

    <xs:complexType name="AbstractDictionary" abstract="true">
        <xs:sequence>
            <xs:element name="Identifier" type="AuxilliaryIdentifier" minOccurs="0"
                maxOccurs="unbounded"/>
            <xs:element name="Field" type="FieldType" maxOccurs="unbounded">
                <xs:unique name="CatIDUniqueIfPresent">
                    <xs:selector xpath="Category"/>
                    <xs:field xpath="@id"/>
                </xs:unique>
            </xs:element>
        </xs:sequence>
    </xs:complexType>


    <xs:complexType name="StandaloneDictionary">
        <xs:complexContent>
            <xs:extension base="AbstractDictionary">
                <xs:attribute name="numberOfFields" type="xs:integer"/>
                <xs:attribute name="sourceFormat" type="sourceFormatType" use="required"/>
                <xs:attribute name="sourceName" type="xs:string"/>
                <xs:attribute name="sourceDictType" type="dictType_all"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>
    <xs:complexType name="StandaloneRawDictionary">
        <xs:complexContent>
            <xs:extension base="AbstractDictionary">
                <xs:attribute name="numberOfFields" type="xs:integer"/>
                <xs:attribute name="sourceFormat" type="sourceFormatType" use="required"/>
                <xs:attribute name="sourceName" type="xs:string"/>
                <xs:attribute name="sourceDictType" type="dictType_raw"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>


    <xs:complexType name="Dictionary">
        <xs:complexContent>
            <xs:extension base="StandaloneDictionary">
                <xs:attribute name="id" type="xs:string"/>
            </xs:extension>
        </xs:complexContent>
    </xs:complexType>

    <xs:complexType name="FieldType">

        <xs:sequence minOccurs="1">
            <xs:element name="Extension" type="Extension" minOccurs="0" maxOccurs="unbounded"> </xs:element>
            <xs:element name="Identifier" type="AuxilliaryIdentifier" minOccurs="0"
                maxOccurs="unbounded"/>
            <!-- Name element replaces name attribute which became obsolete-->
            <xs:element name="Name" type="xs:string" minOccurs="0"/>
            <xs:sequence maxOccurs="unbounded" minOccurs="0">
                <xs:choice>
                    <xs:element name="Interval" type="IntervalType" minOccurs="0"
                        maxOccurs="unbounded"/>
                    <xs:element name="Category" type="Category" minOccurs="0" maxOccurs="unbounded"
                    />
                </xs:choice>
            </xs:sequence>
        </xs:sequence>
        <xs:attribute name="optype" type="OPTYPE"/>
        <xs:attribute name="isCyclic" default="0">
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="0"/>
                    <xs:enumeration value="1"/>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="dataType" type="DATATYPE"/>
        <!-- obsolete -> Name element -->
        <!--s:attribute name="name" type="xs:string"/-->
        <xs:attribute name="derived" type="xs:boolean"/>
        <xs:attribute name="id" type="xs:string"/>

    </xs:complexType>
    <xs:simpleType name="dictType_all">
        <xs:restriction base="xs:string">
            <xs:enumeration value="TransformationDictionary"/>
            <xs:enumeration value="DataDictionary"/>
            <xs:enumeration value="Range"/>
            <xs:enumeration value="DiscretizationHint"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="dictType_raw">
        <xs:restriction base="dictType_all">
            <xs:enumeration value="DataDictionary"/>
            <xs:enumeration value="Range"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="dictType_prepr">
        <xs:restriction base="dictType_all">
            <xs:enumeration value="TransformationDictionary"/>
            <xs:enumeration value="DiscretizationHint"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="dictType_bkef">
        <xs:restriction base="dictType_all">
            <xs:enumeration value="DiscretizationHint"/>
            <xs:enumeration value="Range"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="AuxilliaryIdentifier">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="display" type="xs:boolean" default="false"/>
                <xs:attribute name="name" type="xs:string"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>
    <xs:complexType name="Category">
        <xs:simpleContent>
            <xs:extension base="xs:string">
                <xs:attribute name="property">
                    <xs:simpleType>
                        <xs:restriction base="xs:string">
                            <xs:enumeration value="missing"/>
                        </xs:restriction>
                    </xs:simpleType>
                </xs:attribute>
                <xs:attribute name="id" type="xs:string"/>
            </xs:extension>
        </xs:simpleContent>
    </xs:complexType>

    <xs:simpleType name="sourceFormatType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="PMML"/>
            <xs:enumeration value="BKEF"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="OPTYPE">
        <xs:restriction base="xs:string">
            <xs:enumeration value="categorical"/>
            <xs:enumeration value="ordinal"/>
            <xs:enumeration value="continuous"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:complexType name="FieldStatistics">
        <xs:sequence>
            <xs:element name="Min" type="xs:double"/>
            <xs:element name="Max" type="xs:double"/>
            <xs:element name="Average" type="xs:double"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="IntStatistics">
        <xs:sequence>
            <xs:element name="Min" type="xs:double"/>
            <xs:element name="Max" type="xs:double"/>
            <xs:element name="Average" type="xs:double"/>
        </xs:sequence>
    </xs:complexType>
    <xs:complexType name="CatStatistics">
        <xs:sequence>
            <xs:element name="AbsFreq" type="xs:double"/>
            <xs:element name="RelFreq" type="xs:double"/>
        </xs:sequence>
    </xs:complexType>

    <xs:complexType name="IntervalType">
        <xs:attribute name="closure" use="required" type="closureType"/>
        <xs:attribute name="leftMargin" type="xs:float"/>
        <xs:attribute name="rightMargin" type="xs:float"/>
        <!-- obsolete, binName moved to interval content -->
    </xs:complexType>
    <xs:simpleType name="closureType">
        <xs:restriction base="xs:string">
            <xs:enumeration value="openClosed"/>
            <xs:enumeration value="openOpen"/>
            <xs:enumeration value="closedOpen"/>
            <xs:enumeration value="closedClosed"/>
        </xs:restriction>
    </xs:simpleType>
    <xs:simpleType name="DATATYPE">
        <xs:restriction base="xs:string">
            <xs:enumeration value="string"/>
            <xs:enumeration value="integer"/>
            <xs:enumeration value="float"/>
            <xs:enumeration value="double"/>
            <xs:enumeration value="date"/>
            <xs:enumeration value="time"/>
            <xs:enumeration value="dateTime"/>
            <xs:enumeration value="dateDaysSince[0]"/>
            <xs:enumeration value="dateDaysSince[1960]"/>
            <xs:enumeration value="dateDaysSince[1970]"/>
            <xs:enumeration value="dateDaysSince[1980]"/>
            <xs:enumeration value="timeSeconds"/>
            <xs:enumeration value="dateTimeSecondsSince[0]"/>
            <xs:enumeration value="dateTimeSecondsSince[1960]"/>
            <xs:enumeration value="dateTimeSecondsSince[1970]"/>
            <xs:enumeration value="dateTimeSecondsSince[1980]"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>
